// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way16 (in=in,
                sel=address,
                a[0..15]=DMUXout0,
                b[0..15]=DMUXout1,
                c[0..15]=DMUXout2,
                d[0..15]=DMUXout3,
                e[0..15]=DMUXout4,
                f[0..15]=DMUXout5,
                g[0..15]=DMUXout6,
                h[0..15]=DMUXout7);
    // Problem: Everytime the demux outputs 0, if load=1, each register is
    // reset to 0.
    // There should be an enable command along with the register values to stop
    // this from happening.
    // Only one register should be loaded at a time...
    DMux8Way (in=load, sel=address, a=load0, b=load1, c=load2, d=load3,
                                e=load4, f=load5, g=load6, h=load7);
    Register (in=DMUXout0, load=load0, out=out0);
    Register (in=DMUXout1, load=load1, out=out1);
    Register (in=DMUXout2, load=load2, out=out2);
    Register (in=DMUXout3, load=load3, out=out3);
    Register (in=DMUXout4, load=load4, out=out4);
    Register (in=DMUXout5, load=load5, out=out5);
    Register (in=DMUXout6, load=load6, out=out6);
    Register (in=DMUXout7, load=load7, out=out7);

    Mux8Way16 (a=out0,
               b=out1,
               c=out2,
               d=out3,
               e=out4,
               f=out5,
               g=out6,
               h=out7,
               sel=address,
               out=out);
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Implementing zx and nx
    Mux16 (a=x, b[0..15]=false, sel=zx, out=zxOUT);
    Not16 (in=zxOUT, out=notX);
    Mux16 (a=zxOUT, b=notX, sel=nx, out=nxOUT);
    // Implementing zx and ny
    Mux16 (a=y, b[0..15]=false, sel=zy, out=zyOUT);
    Not16 (in=zyOUT, out=notY);
    Mux16 (a=zyOUT, b=notY, sel=ny, out=nyOUT);
    // Implementing f
    Add16 (a=nxOUT, b=nyOUT, out=xADDy);
    And16 (a=nxOUT, b=nyOUT, out=xANDy);
    Mux16 (a=xANDy, b=xADDy, sel=f, out[0..15]=fOUT);
    // Implementing no and ng flag
    Not16 (in=fOUT, out=notfOUT);
    Mux16 (a=fOUT, b=notfOUT, sel=no, out[15]=ng, out=out,
                                out[0]= o0, out[1]=o1,
                                out[2]=o2, out[3]=o3,
                                out[4]=o4, out[5]=o5,
                                out[6]=o6, out[7]=o7,
                                out[8]=o8, out[9]=o9,
                                out[10]=o10, out[11]=o11,
                                out[12]=o12, out[13]=o13,
                                out[14]=o14, out[15]=o15 );
    // Implementing zr flag
    Or (a=o0, b=o1, out=orAa);
    Or (a=o2, b=o3, out=orAb);
    Or (a=o4, b=o5, out=orAc);
    Or (a=o6, b=o7, out=orAd);
    Or (a=o8, b=o9, out=orAe);
    Or (a=o10, b=o11, out=orAf);
    Or (a=o12, b=o13, out=orAg);
    Or (a=o14, b=o15, out=orAh);
    //
    Or (a=orAa, b=orAb, out=orBa);
    Or (a=orAc, b=orAd, out=orBb);
    Or (a=orAe, b=orAf, out=orBc);
    Or (a=orAg, b=orAh, out=orBd);
    //
    Or (a=orBa, b=orBb, out=orCa);
    Or (a=orBc, b=orBd, out=orCb);
    //
    Or (a=orCa, b=orCb, out=orDa);
    Not (in=orDa, out=zr);
}

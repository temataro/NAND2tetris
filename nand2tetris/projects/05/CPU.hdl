// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16 (a=outA, b=inM, sel=instruction[12], out=AMout);
    Mux16 (a=ALUout, b=instruction, sel=instruction[15], out=inA);
    Not (in=instruction[15], out=Ainst);
    Or (a=Ainst, b=instruction[5], out=loadA);
    ARegister (in=inA, load=loadA, out=outA, out[0..14]=addressM);
    DRegister (in=ALUout, load=instruction[4], out=Dout); // I[4] controls whether we write to D
    // loadA = Ainst or d1
    // ALU
    // fix comments below!
    And (a=instruction[11], b=instruction[15], out=zx); // zx = Cinst*c1
    And (a=instruction[10], b=instruction[15], out=nx); // nx = Cinst*c2
    And (a=instruction[7], b=instruction[15], out=f); // zx = Cinst*c1
    And (a=instruction[6], b=instruction[15], out=no); // zx = Cinst*c1
    Or (a=instruction[9], b=Ainst, out=zy); // zy = Ainst + c3
    Or (a=instruction[8], b=Ainst, out=ny); 
    ALU (x=Dout, y=AMout,
        zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no,
        out=outM, out=ALUout, out=Dreg, zr=zeroflg, ng=negflg);
    And (a=instruction[15], b=instruction[3], out=writeM);
    // Jump instructions
    Or (a=negflg, b=zeroflg, out=NOTpos);
    Not (in=NOTpos, out=pos);
    And (a=instruction[2], b=negflg, out=jmp0);
    And (a=instruction[1], b=zeroflg, out=jmp1);
    And (a=instruction[0], b=pos, out=jmp2);
    Or (a=jmp0, b=jmp1, out=jmp0jmp1);
    Or (a=jmp0jmp1, b=jmp2, out=ORjmp0jmp1jmp2);
    //
    PC (in=outA, load=ORjmp0jmp1jmp2, inc=true, reset=reset, out[0..14]=pc);
}
